import createClient, { Middleware } from 'openapi-fetch';
import { NerisApiConfig } from './config';
import type { components, paths } from './neris-api'; // generated by openapi-typescript

const expiresDiff = 1000;

export const authMiddleware = (config: NerisApiConfig): Middleware => {
  let accessToken = '';
  let refreshToken = '';
  let expiresAt = new Date(0);

  return {
    async onRequest({ request, options }) {
      let body: components['schemas']['TokenBody'] | undefined;
      let headers: Record<string, string> = {};

      switch (config.auth._type) {
        case 'password':
          if (expiresAt.valueOf() - Date.now() < expiresDiff) {
            body = {
              grant_type: 'password',
              username: config.auth.username,
              password: config.auth.password,
            };
          }

          break;

        case 'client_credentials':
          if (expiresAt.valueOf() - Date.now() < expiresDiff) {
            const encoded = btoa(`${config.auth.client_id}:${config.auth.client_secret}`);
            headers = { authorization: `Basic ${encoded}` };

            if (refreshToken) {
              body = {
                grant_type: 'refresh_token',
                refresh_token: refreshToken,
              };
            } else {
              body = { grant_type: 'client_credentials' };
            }
          }

          break;

        case 'access_token':
          request.headers.set('authorization', `Bearer ${config.auth.access_token}`);

          return request;
      }

      // get new token set if necessary
      if (body) {
        const client = createClient<paths>({
          baseUrl: config.baseUrl,
          headers,
          fetch: config.fetch,
        });

        const tokenRes = await client.POST('/token', { body });

        if (tokenRes.error) {
          throw new Error(`authentication failed. ${tokenRes.error.detail}`);
        } else if ((tokenRes.data as any).error) {
          const err = (tokenRes.data as any).error as components['schemas']['HTTPValidationError'];

          throw new Error(`authentication failed. ${err.detail}`);
        } else if (tokenRes.data) {
          const res = tokenRes.data as components['schemas']['AuthenticationSuccessResponse'];

          accessToken = res.access_token;
          refreshToken = res.refresh_token || refreshToken;
          expiresAt = new Date(Date.now() + res.expires_in * 1000);
        }
      }

      request.headers.set('authorization', `Bearer ${accessToken}`);

      return request;
    },
  };
};
